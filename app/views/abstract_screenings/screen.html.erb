<div x-data id="abstrackr-wrapper">
  <%= render 'abstract_screenings/screen/weighing_screen' %>
  <!-- prettier-ignore -->
  <%= render 'abstract_screenings/screen/confirmation_modal' %>
  <!-- prettier-ignore -->
  <%= render 'abstract_screenings/screen/menu' %>
  <!-- prettier-ignore -->
  <%= render 'abstract_screenings/screen/reasoning_menu' %>
  <div
    class="m-auto lg:w-1/2 h-32 absolute inset-0 mt-0 overflow-y-hidden bg-gray-300 flex flex-col justify-center"
  >
    <div class="mt-3">
      <div class="horizontal-scroll-wrapper">
        <h1
          class="px-8 text-base font-bold horizontal-scroll-wrapper-item overflow-x-auto whitespace-nowrap"
          x-text="$store.screenStore.citation.title"
        ></h1>
      </div>
      <div class="px-8 text-sm overflow-x-auto whitespace-nowrap">
        Journal: <span x-text="$store.screenStore.citation.journal"></span>
      </div>
      <div class="horizontal-scroll-wrapper">
        <div
          class="horizontal-scroll-wrapper-item text-sm overflow-x-auto whitespace-nowrap"
        >
          Authors: <span x-text="$store.screenStore.citation.authors"></span>
        </div>
      </div>
    </div>
  </div>
  <div
    class="m-auto lg:w-1/2 h-auto block absolute inset-0 mt-32 mb-32 overflow-y-auto overflow-x-hidden bg-gray-100"
  >
    <div class="vertical-scroll-wrapper">
      <div class="vertical-scroll-wrapper-item">
        <div class="px-8 leading-loose weightable">
          <template
            x-for="word in ($store.screenStore.citation.abstract.split(/(\W)/))"
          >
            <span
              x-text="word"
              @click="if (word.length > 1) { $store.screenStore.toggle(); $store.screenStore.wordWeight = word }"
              :class="$store.screenStore.cssWordClass[$store.screenStore.word_weights[word.toLowerCase()]] + ' cursor-pointer'"
            ></span>
          </template>
        </div>
        <hr />
        <div
          class="px-8 break-all leading-loose"
          x-text="$store.screenStore.citation.keywords"
        ></div>
        <div
          class="px-8 break-all leading-loose"
          x-text="$store.screenStore.citation.id"
        ></div>
      </div>
    </div>
  </div>

  <div
    class="lg:w-1/2 m-auto absolute bottom-0 left-0 right-0 bg-gray-100 h-32"
  >
    <div class="h-full text-white">
      <div class="grid grid-cols-3 h-full">
        <div
          class="cursor-pointer border-r-8 bg-red-500 flex justify-center items-center rounded-tl-2xl"
          @click="$store.screenStore.label_value = -1; if ($store.screenStore.requireReasoning()) { $store.screenStore.reasoningMenu = true } else { $store.screenStore.postLabel(true) }"
          :class="($store.screenStore.label_value == -1 || $store.screenStore.label_value == null) ? '' : 'saturate-[0.1]'"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-10 w-10"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
        <div class="grid grid-rows-2">
          <div
            class="cursor-pointer border-b-4 bg-srdrpurple flex justify-center items-center"
            @click="$store.screenStore.label_value = 0; if ($store.screenStore.requireReasoning()) { $store.screenStore.reasoningMenu = true } else { $store.screenStore.postLabel(true) }"
            :class="($store.screenStore.label_value == 0 || $store.screenStore.label_value == null)? '' : 'saturate-[0.1]'"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-10 w-10"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1zm-5 8.274l-.818 2.552c.25.112.526.174.818.174.292 0 .569-.062.818-.174L5 10.274zm10 0l-.818 2.552c.25.112.526.174.818.174.292 0 .569-.062.818-.174L15 10.274z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
          <div
            class="cursor-pointer border-t-2 bg-gray-500 flex justify-center items-center"
            @click="$store.screenStore.menu = !$store.screenStore.menu"
          >
            <div class="space-y-2">
              <div class="w-8 h-0.5 bg-white"></div>
              <div class="w-8 h-0.5 bg-white"></div>
              <div class="w-8 h-0.5 bg-white"></div>
            </div>
          </div>
        </div>
        <div
          class="cursor-pointer border-l-8 bg-green-500 flex justify-center items-center rounded-tr-2xl"
          @click="$store.screenStore.label_value = 1; if ($store.screenStore.requireReasoning()) { $store.screenStore.reasoningMenu = true } else { $store.screenStore.postLabel(true) }"
          :class="($store.screenStore.label_value == 1 || $store.screenStore.label_value == null)? '' : 'saturate-[0.1]'"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-10 w-10"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function prepareText() {
    var p = $(".weightable");

    p.html(function (index, oldHtml) {
      return oldHtml.replace(
        /\b(\w+?)\b/g,
        `<span onClick="$('#term').val('$1')" class="word hover:bg-blue-200">$1</span>`
      );
    });
  }
  document.addEventListener("alpine:init", () => {
    Alpine.store("screenStore", {
      menu: false,
      weighingScreen: false,
      reasoningMenu: true,
      confirmationModal: false,
      confirmationModalText: "",
      confirmationModalTexts: {
        "-1": "Rejected",
        0: "Maybe",
        1: "Accepted",
      },
      citation: {
        abstract_screening_id: "",
        abstract_screenings_citations_project_id: "",
        title: "",
        journal: "",
        authors: "",
        abstract: "",
        keywords: "",
        id: "",
      },
      reasons: {},
      tags: {},
      notes: "",
      options: {
        yes_tag_required: null,
        no_tag_required: null,
        maybe_tag_required: null,
        yes_reason_required: null,
        no_reason_required: null,
        maybe_reason_required: null,
        yes_note_required: null,
        no_note_required: null,
        maybe_note_required: null,
      },
      label_value: null,
      word_weights: {},
      wordWeight: "",
      cssWordClass: {
        2: "text-green-500 font-black",
        1: "text-green-500",
        0: "",
        "-1": "text-red-500",
        "-2": "text-red-500 font-black",
      },

      async toggle() {
        this.weighingScreen = !this.weighingScreen;
        await new Promise((resolve, reject) => setTimeout(resolve, 100));
        document.getElementById("term").focus();
      },

      requireReasoning() {
        return (
          (this.label_value == -1 &&
            (this.options.no_tag_required ||
              this.options.no_reason_required ||
              this.options.no_note_required)) ||
          (this.label_value == 0 &&
            (this.options.maybe_tag_required ||
              this.options.maybe_reason_required ||
              this.options.maybe_note_required)) ||
          (this.label_value == 1 &&
            (this.options.yes_tag_required ||
              this.options.yes_reason_required ||
              this.options.yes_note_required))
        );
      },

      satisfyReasoning() {
        let satisfactory = true;
        const hasSomeReason = Object.keys(this.reasons).some(
          (v) => this.reasons[v] == true
        );
        const hasSomeTag = Object.keys(this.tags).some(
          (v) => this.tags[v] == true
        );
        const hasSomeNote = this.notes.length > 0;
        if (this.label_value == -1) {
          if (this.options.no_tag_required)
            satisfactory = hasSomeTag && satisfactory;
          if (this.options.no_reason_required)
            satisfactory = hasSomeReason && satisfactory;
          if (this.options.no_note_required)
            satisfactory = hasSomeNote && satisfactory;
        }
        if (this.label_value == 0) {
          if (this.options.maybe_tag_required)
            satisfactory = hasSomeTag && satisfactory;
          if (this.options.maybe_reason_required)
            satisfactory = hasSomeReason && satisfactory;
          if (this.options.maybe_note_required)
            satisfactory = hasSomeNote && satisfactory;
        }
        if (this.label_value == 1) {
          if (this.options.yes_tag_required)
            satisfactory = hasSomeTag && satisfactory;
          if (this.options.yes_reason_required)
            satisfactory = hasSomeReason && satisfactory;
          if (this.options.yes_note_required)
            satisfactory = hasSomeNote && satisfactory;
        }

        return satisfactory;
      },

      mustSelectReason() {
        if (this.label_value == -1) {
          return this.options.no_reason_required;
        } else if (this.label_value == 0) {
          return this.options.maybe_reason_required;
        } else if (this.label_value == 1) {
          return this.options.yes_reason_required;
        }
      },

      mustSelectTag() {
        if (this.label_value == -1) {
          return this.options.no_tag_required;
        } else if (this.label_value == 0) {
          return this.options.maybe_tag_required;
        } else if (this.label_value == 1) {
          return this.options.yes_tag_required;
        }
      },

      mustEnterNotes() {
        if (this.label_value == -1) {
          return this.options.no_note_required;
        } else if (this.label_value == 0) {
          return this.options.maybe_note_required;
        } else if (this.label_value == 1) {
          return this.options.yes_note_required;
        }
      },

      async showConfirmation(label) {
        this.confirmationModalText = this.confirmationModalTexts[label];
        this.confirmationModal = true;
        await new Promise((resolve, reject) => setTimeout(resolve, 1000));
        this.confirmationModal = false;
      },

      async sendWw(word, weight) {
        const response = await fetch(
          "/abstract_screenings/<%= params[:abstract_screening_id] %>/create_word_weight",
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              word,
              weight,
            }),
          }
        );
        const data = await response.json();
        this.word_weights = data;
      },

      async postLabel(submit) {
        this.reasoningMenu = false;
        const response = await fetch(
          "/abstract_screenings/<%= params[:abstract_screening_id] %>/label",
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              data: {
                label_value: this.label_value,
                citation: this.citation,
                reasons: this.reasons,
                tags: this.tags,
                notes: this.notes,
              },
            }),
          }
        );
        const data = await response.json();
        if (submit) await this.showConfirmation(this.label_value);
        this.citation = data.citation;
        this.reasons = data.reasons;
        this.tags = data.tags;
        this.notes = data.notes;
        this.options = data.options;
        this.label_value = data.label_value;
        this.word_weights = data.word_weights;
        await new Promise((resolve, reject) => setTimeout(resolve, 0));
        console.log(this);
      },
    });
    Alpine.store("screenStore").postLabel();
  });
</script>
