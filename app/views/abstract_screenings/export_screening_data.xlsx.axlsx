wb = xlsx_package.workbook

wb.add_worksheet(name: "citations for project id #{@project.id}") do |sheet|
  sheet.add_row(
    [
      'srdr citation id',
      'accession no',
      'authors',
      'title',
      'pub date',
      'abstract screening status',
      'fulltext screening status',
      'extraction status',
      'sub status'
    ]
  )
  @project.citations_projects.each do |cp|
    sd = cp.search_data
    sheet.add_row(
      [
        sd['citation_id'],
        sd['accession_number_alts'],
        sd['author_map_string'],
        sd['name'],
        sd['year'],
        sd['abstract_qualification'],
        sd['fulltext_qualification'],
        sd['screening_status']
      ]
    )
  end
end

wb.add_worksheet(name: 'screening descriptions') do |sheet|
  sheet.add_row(
    [
      'screening phase',
      'screening system id',
      'type',
      'exclusive users',
      'if exclusive, user handles',
      'yes labels require tags',
      'no labels require tags',
      'maybe labels require tags',
      'no labels require reasons',
      'maybe labels require reasons',
      'yes labels require notes',
      'no labels require notes',
      'maybe labels require notes',
      'exclusive reasons',
      'exclusive tags',
      'hide author information',
      'hide journal information',
      'selected reasons',
      'selected tags'
    ]
  )
  @project.abstract_screenings.each do |as|
    sheet.add_row(
      [
        'abstract',
        as.id,
        as.abstract_screening_type,
        as.exclusive_users,
        as.users.map(&:handle),
        as.yes_tag_required,
        as.no_tag_required,
        as.maybe_tag_required,
        as.no_reason_required,
        as.maybe_reason_required,
        as.yes_note_required,
        as.no_note_required,
        as.maybe_note_required,
        as.only_predefined_reasons,
        as.only_predefined_tags,
        as.hide_author,
        as.hide_journal,
        as.reasons.map(&:name),
        as.tags.map(&:name)
      ]
    )
  end
end

@project.abstract_screenings.each do |as|
  wb.add_worksheet(name: "abstract screening id #{as.id}") do |sheet|
    headers = [
      'srdr citation id',
      'abstract screening type',
      'user',
      'label',
      'reasons',
      'tags',
      'notes'
    ]
    asf = ScreeningForm.find_or_create_by(project: @project, form_type: 'abstract')
    asf.sf_questions.order(:position).each_with_index do |sf_question, q_index|
      sf_question.sf_rows.order(:position).each_with_index do |sf_row, r_index|
        question_name = sf_row.name.blank? ? "Question #{q_index}" : sf_question.name
        row_name = sf_row.name.blank? ? "Row #{r_index}" : sf_row.name
        sf_question.sf_columns.order(:position).each_with_index do |sf_column, c_index|
          column_name = sf_column.name.blank? ? "Column #{c_index}" : sf_column.name
          headers << "#{question_name}: #{row_name} / #{column_name}"
        end
      end
    end
    sheet.add_row(
      headers
    )
    as.abstract_screening_results.each do |asr|
      row = [
        asr.citation.id,
        asr.abstract_screening.abstract_screening_type,
        asr.user.handle,
        asr.label,
        asr.reasons.map(&:name),
        asr.tags.map(&:name),
        asr.notes
      ]

      asf.sf_questions.order(:position).each_with_index do |sf_question, _q_index|
        sf_question.sf_rows.order(:position).each_with_index do |sf_row, _r_index|
          sf_question.sf_columns.order(:position).each_with_index do |sf_column, _c_index|
            sf_cell = SfCell.find_by(sf_row:, sf_column:)
            if sf_cell.nil?
              row << nil
            else
              cell = "Answer Type: #{sf_cell.cell_type}\n"
              sfars = SfAbstractRecord.where(sf_cell:, abstract_screening_result: asr)
              sfos = sf_cell.sf_options.order(:position)
              case sf_cell.cell_type
              when SfCell::TEXT
                cell += sfars.map(&:value).join('\n')
              when SfCell::NUMERIC
                sfars.each do |sfar|
                  cell += sfar.equality if sf_cell.with_equality
                  cell += sfar.value
                  cell += "\n"
                end
              when SfCell::CHECKBOX, SfCell::DROPDOWN, SfCell::RADIO
                sfos.each do |sfo|
                  record = sfars.select { |sfar| sfar.value == sfo.name }.first
                  cell += "#{sfo.name}: #{record.nil? ? 'unselected' : 'selected'}"
                  cell += " [followup: #{record&.followup}]" if sfo.with_followup
                  cell += "\n"
                end
              when SfCell::SELECT_ONE, SfCell::SELECT_MULTIPLE
                sfos.each do |sfo|
                  record = sfars.select { |sfar| sfar.value == sfo.name }.first
                  cell += "#{sfo.name}: #{record.nil? ? 'unselected' : 'selected'}"
                  cell += " [followup: #{record&.followup}]" if sfo.with_followup
                  cell += "\n"
                end
                sfars.select { |sfar| sfos.none? { |sfo| sfo.name == sfar.value } }.each do |sfar|
                  cell += "#{sfar.value}: selected"
                  cell += "\n"
                end
              end
              row << cell
            end
          end
        end
      end

      sheet.add_row(row)
    end
  end
end

@project.fulltext_screenings.each do |fs|
  wb.add_worksheet(name: "fulltext screening id #{fs.id}") do |sheet|
    headers = [
      'srdr citation id',
      'fulltext screening type',
      'user',
      'label',
      'reasons',
      'tags',
      'notes'
    ]
    fsf = ScreeningForm.find_or_create_by(project: @project, form_type: 'fulltext')
    fsf.sf_questions.order(:position).each_with_index do |sf_question, q_index|
      sf_question.sf_rows.order(:position).each_with_index do |sf_row, r_index|
        question_name = sf_row.name.blank? ? "Question #{q_index}" : sf_question.name
        row_name = sf_row.name.blank? ? "Row #{r_index}" : sf_row.name
        sf_question.sf_columns.order(:position).each_with_index do |sf_column, c_index|
          column_name = sf_column.name.blank? ? "Column #{c_index}" : sf_column.name
          headers << "#{question_name}: #{row_name} / #{column_name}"
        end
      end
    end
    sheet.add_row(
      headers
    )
    fs.fulltext_screening_results.each do |fsr|
      row = [
        fsr.citation.id,
        fsr.fulltext_screening.fulltext_screening_type,
        fsr.user.handle,
        fsr.label,
        fsr.reasons.map(&:name),
        fsr.tags.map(&:name),
        fsr.notes
      ]

      fsf.sf_questions.order(:position).each_with_index do |sf_question, _q_index|
        sf_question.sf_rows.order(:position).each_with_index do |sf_row, _r_index|
          sf_question.sf_columns.order(:position).each_with_index do |sf_column, _c_index|
            sf_cell = SfCell.find_by(sf_row:, sf_column:)
            if sf_cell.nil?
              row << nil
            else
              cell = "Answer Type: #{sf_cell.cell_type}\n"
              sffrs = SfFulltextRecord.where(sf_cell:, fulltext_screening_result: fsr)
              sfos = sf_cell.sf_options.order(:position)
              case sf_cell.cell_type
              when SfCell::TEXT
                cell += sffrs.map(&:value).join('\n')
              when SfCell::NUMERIC
                sffrs.each do |sffr|
                  cell += sffr.equality if sf_cell.with_equality
                  cell += sffr.value
                  cell += "\n"
                end
              when SfCell::CHECKBOX, SfCell::DROPDOWN, SfCell::RADIO
                sfos.each do |sfo|
                  record = sffrs.select { |sffr| sffr.value == sfo.name }.first
                  cell += "#{sfo.name}: #{record.nil? ? 'unselected' : 'selected'}"
                  cell += " [followup: #{record&.followup}]" if sfo.with_followup
                  cell += "\n"
                end
              when SfCell::SELECT_ONE, SfCell::SELECT_MULTIPLE
                sfos.each do |sfo|
                  record = sffrs.select { |sffr| sffr.value == sfo.name }.first
                  cell += "#{sfo.name}: #{record.nil? ? 'unselected' : 'selected'}"
                  cell += " [followup: #{record&.followup}]" if sfo.with_followup
                  cell += "\n"
                end
                sffrs.select { |sffr| sfos.none? { |sfo| sfo.name == sffr.value } }.each do |sffr|
                  cell += "#{sffr.value}: selected"
                  cell += "\n"
                end
              end
              row << cell
            end
          end
        end
      end

      sheet.add_row(row)
    end
  end
end
